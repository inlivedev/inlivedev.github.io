import 'package:flutter/material.dart';
import 'package:flutter_webrtc/flutter_webrtc.dart';

import 'package:flutter_client_sse/flutter_client_sse.dart';

import 'dart:io';

import 'package:flutter/foundation.dart';

void main() {
  FlutterError.onError = (details) {
    FlutterError.presentError(details);
    if (kReleaseMode) exit(1);
  };

  PlatformDispatcher.instance.onError = (error, stack) {
    print('Platform error: $error');
    return true;
  };

  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: VideoConferencePage(),
    );
  }
}

class VideoConferencePage extends StatefulWidget {
  const VideoConferencePage({super.key});

  @override
  _VideoConferencePageState createState() => _VideoConferencePageState();
}

class _VideoConferencePageState extends State<VideoConferencePage> {
  final _localRenderer = RTCVideoRenderer();
  final _remoteRenderer = RTCVideoRenderer();
  RTCPeerConnection? _peerConnection;
  MediaStream? _localStream;
  TextEditingController _roomController = TextEditingController();

  @override
  void initState() {
    super.initState();
    initRenderers();
  }

  @override
  void dispose() {
    _localRenderer.dispose();
    _remoteRenderer.dispose();
    _peerConnection?.close();
    super.dispose();
  }

  Future<void> initRenderers() async {
    try {
      await _localRenderer.initialize();
      await _remoteRenderer.initialize();
    } catch (e) {
      print('Error: $e');
    }
  }

  Future<RTCPeerConnection> _createPeerConnection(String roomId) async {
    var origin = 'https://hub.inlive.app';
    var apiOrigin = 'https://api.inlive.app';

    final configuration = {
      'iceServers': [
        {
          'urls': 'turn:turn.inlive.app:3478',
          'username': 'inlive',
          'credential': 'inlivesdkturn'
        },
      ]
    };

    try {
      final pc = await createPeerConnection(configuration);

      // Additional setup for the peer connection
      pc.onIceCandidate = (candidate) {
        print('New ICE candidate: ${candidate.candidate}');
		// send candidate to server
		
      };

      pc.onIceConnectionState = (state) {
        print('ICE connection state: $state');
      };

      pc.onAddStream = (stream) {
        print('New stream added: ${stream.id}');
        _remoteRenderer.srcObject = stream;
      };

      _localStream = await navigator.mediaDevices.getUserMedia({
        'audio': true,
        'video': false,
      });

      _localRenderer.srcObject = _localStream;

      pc.onRenegotiationNeeded = () {
        print('Renegotiation needed');
      };

      if (_localStream != null) {
        _localStream!.getTracks().forEach((track) {
          pc.addTrack(track, _localStream!);
        });
      }

      return pc;
    } catch (e) {
      print('Failed to create peer connection: $e');
      rethrow;
    }
  }

  void _joinRoom() async {
    // Add your additional join room logic here
    String roomId = _roomController.text;

    try {
      _peerConnection = await _createPeerConnection(roomId);
    } catch (e) {
      print('Error: $e');
    }

    print('Joining room: $roomId');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Video Conference'),
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: TextField(
              controller: _roomController,
              decoration: InputDecoration(
                border: OutlineInputBorder(),
                labelText: 'Room ID',
              ),
            ),
          ),
          ElevatedButton(
            onPressed: _joinRoom,
            child: Text('Join Room'),
          ),
          Expanded(
            child: RTCVideoView(_localRenderer),
          ),
          Expanded(
            child: RTCVideoView(_remoteRenderer),
          ),
        ],
      ),
    );
  }
}
